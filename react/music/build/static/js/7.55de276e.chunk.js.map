{"version":3,"sources":["baseUI/music-note/index.js","baseUI/header/index.js","application/SongList/style.js","application/SongList/index.js","application/Singer/style.js","application/Singer/index.js"],"names":["Container","styled","div","style","MusicNote","forwardRef","props","ref","iconsRef","useRef","transform","prefixStyle","createNode","txt","template","tempNode","document","createElement","innerHTML","firstChild","useEffect","i","node","current","appendChild","slice","call","children","forEach","item","running","addEventListener","this","querySelector","startAnimation","x","y","left","top","display","setTimeout","useImperativeHandle","React","memo","HeaderContainer","marquee","keyframes","Marquee","Header","handleClick","title","isMarquee","className","onClick","defaultProps","SongList","showBackground","SongItem","ul","noWrap","SongsList","refs","count","collectCount","showCollect","songs","changePlayListDispatch","changeCurrentIndexDispatch","changeSequecePlayListDispatch","musicAnimation","totalCount","length","selectItem","e","index","nativeEvent","clientX","clientY","Math","floor","list","res","push","key","id","name","ar","getName","artists","al","album","songList","connect","dispatch","data","changePlayList","changeCurrentIndex","changeSequecePlayList","play","ImgWrapper","bgUrl","CollectButton","SongListWrapper","BgLayer","state","artist","getIn","loading","getSingerDataDispatch","changeEnterLoading","getSingerInfo","initialHeight","useState","showStatus","setShowStatus","immutableArtist","immutableSongs","toJS","collectButton","imageWrapper","songScrollWrapper","songScroll","header","layer","musicNoteRef","match","params","h","offsetHeight","refresh","handleScroll","useCallback","pos","height","newY","imageDOM","buttonDOM","headerDOM","layerDOM","minScrollY","HEADER_HEIGHT","percent","abs","zIndex","paddingTop","setShowStatusFalse","CSSTransition","in","timeout","classNames","appear","unmountOnExit","onExited","history","goBack","picUrl","onScroll"],"mappings":"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","file":"static/js/7.55de276e.chunk.js","sourcesContent":["import React, { useEffect, useImperativeHandle, useRef, forwardRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { prefixStyle } from './../../api/utils';\r\nimport style from '../../assets/global-style';\r\n\r\nconst Container = styled.div`\r\n  .icon_wrapper {\r\n    position: fixed;\r\n    z-index: 1000;\r\n    margin-top: -10px;\r\n    margin-left: -10px;\r\n    color: ${style[\"theme-color\"]};\r\n    font-size: 14px;\r\n    display: none;\r\n    transition: transform 1s cubic-bezier(.62,-0.1,.86,.57);\r\n    transform: translate3d(0, 0, 0);\r\n    >div {\r\n      transition: transform 1s;\r\n    }\r\n  }\r\n`\r\n\r\nconst MusicNote = forwardRef((props, ref) => {\r\n\r\n    const iconsRef = useRef();\r\n    // 容器中有 3 个音符，也就是同时只能有 3 个音符下落\r\n    const ICON_NUMBER = 3;\r\n\r\n    const transform = prefixStyle(\"transform\");\r\n\r\n    // 原生 DOM 操作，返回一个 DOM 节点对象\r\n    const createNode = (txt) => {\r\n        const template = `<div class='icon_wrapper'>${txt}</div>`;\r\n        let tempNode = document.createElement('div');\r\n        tempNode.innerHTML = template;\r\n        return tempNode.firstChild;\r\n    }\r\n\r\n    useEffect(() => {\r\n        for (let i = 0; i < ICON_NUMBER; i++) {\r\n            let node = createNode(`<div class=\"iconfont\">&#xe642;</div>`);\r\n            iconsRef.current.appendChild(node);\r\n        }\r\n        // 类数组转换成数组，当然也可以用 [...xxx] 解构语法或者 Array.from ()\r\n        let domArray = [].slice.call(iconsRef.current.children);\r\n        domArray.forEach(item => {\r\n            item.running = false;\r\n            item.addEventListener('transitionend', function () {\r\n                this.style['display'] = 'none';\r\n                this.style[transform] = `translate3d(0, 0, 0)`;\r\n                this.running = false;\r\n\r\n                let icon = this.querySelector('div');\r\n                icon.style[transform] = `translate3d(0, 0, 0)`;\r\n            }, false);\r\n        });\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const startAnimation = ({ x, y }) => {\r\n        for (let i = 0; i < ICON_NUMBER; i++) {\r\n            let domArray = [].slice.call(iconsRef.current.children)\r\n            let item = domArray[i]\r\n            // 选择一个空闲的元素来开始动画\r\n            if (item.running === false) {\r\n                item.style.left = x + \"px\";\r\n                item.style.top = y + \"px\";\r\n                item.style.display = \"inline-block\";\r\n\r\n                setTimeout(() => {\r\n                    item.running = true;\r\n                    item.style[transform] = `translate3d(0, 750px, 0)`;\r\n                    let icon = item.querySelector(\"div\");\r\n                    icon.style[transform] = `translate3d(-40px, 0, 0)`;\r\n                }, 20);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    // 外界调用的 ref 方法\r\n    useImperativeHandle(ref, () => ({\r\n        startAnimation\r\n    }));\r\n\r\n    return (\r\n        <Container ref={iconsRef}>\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport default React.memo(MusicNote);","import React from 'react';\r\nimport styled,{keyframes} from 'styled-components';\r\nimport style from '../../assets/global-style';\r\nimport PropTypes from \"prop-types\";\r\n// import Marquee from './Marquee'\r\n\r\nconst HeaderContainer = styled.div`\r\n  position: fixed;\r\n  padding: 5px 10px;\r\n  padding-top: 0;\r\n  height: 40px;\r\n  width: 100%;\r\n  z-index: 100;\r\n  display: flex;\r\n  line-height: 40px;\r\n  color: ${style[\"font-color-light\"]};\r\n  .back {\r\n    margin-right: 5px;\r\n    font-size: 20px;\r\n    width: 20px;\r\n  }\r\n  >h1 {\r\n    font-size: ${style[\"font-size-l\"]};\r\n    font-weight: 700;\r\n  }\r\n`\r\n\r\nconst marquee = keyframes`\r\nfrom {\r\n  left: 100%;\r\n  transform: translateX(100%);\r\n  }\r\nto {\r\n  left: -100%;\r\n  transform: translateX(-100%);\r\n  }\r\n}\r\n`\r\n\r\nconst Marquee = styled.div`\r\nwidth: 100%;\r\nheight: 35px;\r\noverflow: hidden;\r\nposition: relative;\r\nwhite-space: nowrap;\r\n.text {\r\n  position: absolute;\r\n  animation: ${marquee} 10s linear infinite;\r\n  }\r\n`\r\n\r\n\r\n\r\n// 处理函数组件拿不到 ref 的问题，所以用 forwardRef\r\nconst Header = React.forwardRef((props, ref) => {\r\n  const { handleClick, title, isMarquee} = props;\r\n  return (\r\n    <HeaderContainer ref={ref}>\r\n      <i className=\"iconfont back\"  onClick={handleClick}>&#xe655;</i>\r\n      {\r\n        isMarquee ? <Marquee><h1 className='text'>{title}</h1></Marquee>:\r\n        <h1>{title}</h1>\r\n      }\r\n    </HeaderContainer>\r\n  )\r\n})\r\n\r\nHeader.defaultProps = {\r\n    handleClick: () => { },\r\n    title: \"标题\",\r\n    isMarquee: false\r\n};\r\n\r\nHeader.propTypes = {\r\n    handleClick: PropTypes.func,\r\n    title: PropTypes.string,\r\n    isMarquee: PropTypes.bool\r\n};\r\n\r\nexport default React.memo(Header);","import styled from 'styled-components';\r\nimport style from '../../assets/global-style';\r\n\r\nexport const SongList = styled.div`\r\n  border-radius: 10px;\r\n  opacity: 0.98;\r\n  // 注意在这里背景改为自配置参数控制\r\n  ${props => props.showBackground ? `background: ${style[\"highlight-background-color\"]};` : \"\"}\r\n  .first_line {\r\n    box-sizing: border-box;\r\n    padding: 10px 0;\r\n    margin-left: 10px;\r\n    position: relative;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid ${style[\"border-color\"]};\r\n    .play_all {\r\n      display: inline-block;\r\n      line-height: 24px;\r\n      color: ${style[\"font-color-desc\"]};\r\n      .iconfont {\r\n        font-size: 24px;\r\n        margin-right: 10px;\r\n        vertical-align: top;\r\n      }\r\n      .sum {\r\n        font-size: ${style[\"font-size-s\"]};\r\n        color: ${style[\"font-color-desc-v2\"]};\r\n      }\r\n      >span {\r\n        vertical-align: top;\r\n      }\r\n    }\r\n    .add_list,.isCollected {\r\n      display: flex;\r\n      align-items: center;\r\n      position: absolute;\r\n      right: 0; top :0; bottom: 0;\r\n      width: 130px;\r\n      line-height: 34px;\r\n      background: ${style[\"theme-color\"]};\r\n      color: ${style[\"font-color-light\"]};\r\n      font-size: 0;\r\n      border-radius: 3px;\r\n      vertical-align: top;\r\n      .iconfont {\r\n        vertical-align: top;\r\n        font-size: 10px;\r\n        margin: 0 5px 0 10px;\r\n      }\r\n      span {\r\n        font-size: 14px;\r\n        line-height: 34px;\r\n      }\r\n    }\r\n    .isCollected {\r\n      display: flex;\r\n      background: ${style[\"background-color\"]};\r\n      color: ${style[\"font-color-desc\"]};\r\n    }\r\n}\r\n`\r\nexport const SongItem = styled.ul`\r\n  >li {\r\n    display: flex;\r\n    height: 60px;\r\n    align-items: center;  \r\n    .index {\r\n      flex-basis: 60px;\r\n      width: 60px;\r\n      height: 60px;\r\n      line-height: 60px;\r\n      text-align: center;\r\n    }\r\n    .info {\r\n      box-sizing: border-box;\r\n      flex: 1;\r\n      display: flex;\r\n      height: 100%;\r\n      padding: 5px 0;\r\n      flex-direction: column;\r\n      justify-content: space-around;\r\n      border-bottom: 1px solid ${style[\"border-color\"]};\r\n      ${style.noWrap()}\r\n      >span {\r\n        ${style.noWrap()}\r\n      }\r\n      >span:first-child {\r\n        color: ${style[\"font-color-desc\"]};\r\n      }\r\n      >span:last-child {\r\n        font-size: ${style[\"font-size-s\"]};\r\n        color: #bba8a8;\r\n      }\r\n    }\r\n  }\r\n`","import React from 'react';\r\nimport { SongList, SongItem } from \"./style\";\r\nimport { getName } from '../../api/utils';\r\nimport { changePlayList, changeCurrentIndex, changeSequecePlayList } from './../../application/Player/store/actionCreators';\r\nimport { connect } from 'react-redux';\r\n\r\nconst SongsList = React.forwardRef((props, refs) => {\r\n\r\n    const { collectCount, showCollect, songs } = props;\r\n    const { changePlayListDispatch, changeCurrentIndexDispatch, changeSequecePlayListDispatch } = props;\r\n    // 接受触发动画的函数\r\nconst { musicAnimation } = props;\r\n\r\n    const totalCount = songs.length;\r\n\r\n    const selectItem = (e, index) => {\r\n        // console.log(e)\r\n        changePlayListDispatch (songs);\r\n        changeSequecePlayListDispatch (songs);\r\n        changeCurrentIndexDispatch (index);\r\n        musicAnimation(e.nativeEvent.clientX, e.nativeEvent.clientY);\r\n      }\r\n\r\n    let songList = (list) => {\r\n        let res = [];\r\n        for (let i = 0; i < list.length; i++) {\r\n            let item = list[i];\r\n            res.push(\r\n                <li key={item.id} onClick={(e) => selectItem(e, i)}>\r\n                    <span className=\"index\">{i+1}</span>\r\n                    <div className=\"info\">\r\n                        <span>{item.name}</span>\r\n                        <span>\r\n                            {item.ar ? getName(item.ar) : getName(item.artists)} - {item.al ? item.al.name : item.album.name}\r\n                        </span>\r\n                    </div>\r\n                </li>\r\n            )\r\n        }\r\n        return res;\r\n    };\r\n\r\n    const collect = (count) => {\r\n        return (\r\n            <div className=\"add_list\">\r\n                <i className=\"iconfont\">&#xe62d;</i>\r\n                <span > 收藏 ({Math.floor(count / 1000) / 10} 万)</span>\r\n            </div>\r\n        )\r\n    };\r\n    return (\r\n        <SongList ref={refs} showBackground={props.showBackground}>\r\n            <div className=\"first_line\">\r\n                <div className=\"play_all\" onClick={e => selectItem(e, 0)}>\r\n                    <i className=\"iconfont\">&#xe6e3;</i>\r\n                    <span > 播放全部 <span className=\"sum\">(共 {totalCount} 首)</span></span>\r\n                </div>\r\n                {showCollect ? collect(collectCount) : null}\r\n            </div>\r\n            <SongItem>\r\n                {songList(songs)}\r\n            </SongItem>\r\n        </SongList>\r\n    )\r\n});\r\n// 映射 dispatch 到 props 上\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      changePlayListDispatch (data){\r\n        dispatch (changePlayList (data));\r\n      },\r\n      changeCurrentIndexDispatch (data) {\r\n        dispatch (changeCurrentIndex (data));\r\n      },\r\n      changeSequecePlayListDispatch (data) {\r\n        dispatch (changeSequecePlayList (data))\r\n      }\r\n    }\r\n  };\r\n  \r\n  // 将 ui 组件包装成容器组件\r\n  export default connect (null, mapDispatchToProps)(React.memo (SongsList));","import styled from'styled-components';\r\nimport style from '../../assets/global-style';\r\n\r\nexport const Container = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: ${props => props.play > 0 ? \"60px\": 0};\r\n  width: 100%;\r\n  z-index: 100;\r\n  overflow: hidden;\r\n  background: #f2f3f4;\r\n  transform-origin: right bottom;\r\n  &.fly-enter, &.fly-appear {\r\n    transform: rotateZ(30deg) translate3d(100%, 0, 0);\r\n  }\r\n  &.fly-enter-active, &.fly-appear-active {\r\n    transition: transform .3s;\r\n    transform: rotateZ(0deg) translate3d(0, 0, 0);\r\n  }\r\n  &.fly-exit {\r\n    transform: rotateZ(0deg) translate3d(0, 0, 0);\r\n  }\r\n  &.fly-exit-active {\r\n    transition: transform .3s;\r\n    transform: rotateZ(30deg) translate3d(100%, 0, 0);\r\n  }\r\n`\r\n\r\nexport const ImgWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-top: 75%;\r\n  transform-origin: top;\r\n  background: url(${props => props.bgUrl});\r\n  background-size: cover;\r\n  z-index: 50;\r\n  .filter {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(7, 17, 27, 0.3);\r\n  }\r\n`\r\nexport const CollectButton = styled.div`\r\n  position: absolute;\r\n  left: 0; right: 0;\r\n  margin: auto;\r\n  box-sizing: border-box;\r\n  width: 120px;\r\n  height: 40px;\r\n  margin-top: -55px;\r\n  z-index:50;\r\n  background: ${style[\"theme-color\"]};\r\n  color: ${style[\"font-color-light\"]};\r\n  border-radius: 20px;\r\n  text-align: center;\r\n  font-size: 0;\r\n  line-height: 40px;\r\n  .iconfont {\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    font-size: 12px;\r\n    vertical-align: 1px;\r\n  }\r\n  .text {\r\n    display: inline-block;\r\n    font-size:14px;\r\n    letter-spacing: 5px;\r\n  }\r\n`\r\nexport const SongListWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 50;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  >div {\r\n    position: absolute;\r\n    left: 0;\r\n    width: 100%;\r\n    overflow: visible;\r\n  }\r\n`\r\n\r\nexport const BgLayer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  background: white;\r\n  border-radius: 10px;\r\n  z-index: 50;\r\n`","// import React, { useState, useRef, useEffect, useCallback } from 'react';\r\n// import { CSSTransition } from \"react-transition-group\";\r\n// import Header from '../../baseUI/header'\r\n// import { Container, ImgWrapper, CollectButton, BgLayer, SongListWrapper } from \"./style\";\r\n// import Scroll from '../../baseUI/scroll'\r\n// import SongsList from '../SongList'\r\n// import { HEADER_HEIGHT } from \"./../../api/config\";\r\n// import { connect } from 'react-redux';\r\n// import { getSingerInfo, changeEnterLoading } from \"./store/actionCreators\";\r\n// import Loading from \"./../../baseUI/loading/index\";\r\n\r\n\r\n// function Singer(props) {\r\n//     const [showStatus, setShowStatus] = useState(true);\r\n//     const collectButton = useRef();\r\n//     const imageWrapper = useRef();\r\n//     const songScrollWrapper = useRef();\r\n//     const songScroll = useRef();\r\n//     const header = useRef();\r\n//     const layer = useRef();\r\n//     // 图片初始高度\r\n//     const initialHeight = useRef(0);\r\n//     const OFFSET = 5;\r\n\r\n//     const {\r\n//         artist: immutableArtist,\r\n//         songs: immutableSongs,\r\n//         loading\r\n//     } = props;\r\n\r\n//     const { getSingerDataDispatch } = props;\r\n\r\n//     const artist = immutableArtist.toJS();\r\n//     const songs = immutableSongs.toJS();\r\n\r\n\r\n\r\n//     useEffect(() => {\r\n//         const id = props.match.params.id;\r\n        \r\n//         getSingerDataDispatch(id);\r\n//         let h = imageWrapper.current.offsetHeight;\r\n//         songScrollWrapper.current.style.top = `${h - OFFSET}px`;\r\n//         initialHeight.current = h;\r\n//         // 把遮罩先放在下面，以裹住歌曲列表\r\n//         layer.current.style.top = `${h - OFFSET}px`;\r\n//         songScroll.current.refresh();\r\n//         //eslint-disable-next-line\r\n//     }, []);\r\n\r\n//     const handleScroll = useCallback(pos => {\r\n//         let height = initialHeight.current;\r\n//         const newY = pos.y;\r\n//         const imageDOM = imageWrapper.current;\r\n//         const buttonDOM = collectButton.current;\r\n//         const headerDOM = header.current;\r\n//         const layerDOM = layer.current;\r\n//         const minScrollY = -(height - OFFSET) + HEADER_HEIGHT;\r\n\r\n//         // 指的是滑动距离占图片高度的百分比\r\n//         const percent = Math.abs(newY / height);\r\n\r\n//         //处理往下拉的情况，效果：图片放大，按钮跟着偏移 \r\n//         if (newY > 0) {\r\n//             imageDOM.style[\"transform\"] = `scale (${1 + percent})`;\r\n//             buttonDOM.style[\"transform\"] = `translate3d (0, ${newY}px, 0)`;\r\n//             layerDOM.style.top = `${height - OFFSET + newY}px`;\r\n//         } else if (newY >= minScrollY) {//往上滑动，但是遮罩还没超过 Header 部分\r\n//             layerDOM.style.top = `${height - OFFSET - Math.abs(newY)}px`;\r\n//             // 这时候保证遮罩的层叠优先级比图片高，不至于被图片挡住\r\n//             layerDOM.style.zIndex = 1;\r\n//             imageDOM.style.paddingTop = \"75%\";\r\n//             imageDOM.style.height = 0;\r\n//             imageDOM.style.zIndex = -1;\r\n//             // 按钮跟着移动且渐渐变透明\r\n//             buttonDOM.style[\"transform\"] = `translate3d (0, ${newY}px, 0)`;\r\n//             buttonDOM.style[\"opacity\"] = `${1 - percent * 2}`;\r\n//         } else if (newY < minScrollY) {\r\n//             // 往上滑动，但是超过 Header 部分\r\n//             layerDOM.style.top = `${HEADER_HEIGHT - OFFSET}px`;\r\n//             layerDOM.style.zIndex = 1;\r\n//             // 防止溢出的歌单内容遮住 Header\r\n//             headerDOM.style.zIndex = 100;\r\n//             // 此时图片高度与 Header 一致\r\n//             imageDOM.style.height = `${HEADER_HEIGHT}px`;\r\n//             imageDOM.style.paddingTop = 0;\r\n//             imageDOM.style.zIndex = 99;\r\n//         }\r\n\r\n//     }, [])\r\n\r\n\r\n//     const setShowStatusFalse = useCallback(() => {\r\n//         setShowStatus(false);\r\n//     }, []);\r\n\r\n\r\n\r\n//     return (\r\n//         <CSSTransition\r\n//             in={showStatus}\r\n//             timeout={300}\r\n//             classNames=\"fly\"\r\n//             appear={true}\r\n//             unmountOnExit\r\n//             onExited={() => props.history.goBack()}\r\n//         >\r\n//             <Container>\r\n//                 <Header\r\n//                     title={'biaoti'}\r\n//                     handleClick={setShowStatusFalse}\r\n//                     ref={header}\r\n//                 ></Header>\r\n//                 <ImgWrapper bgUrl={artist.picUrl} ref={imageWrapper} >\r\n//                     <div className=\"filter\"></div>\r\n//                 </ImgWrapper>\r\n//                 <CollectButton ref={collectButton}>\r\n//                     <i className=\"iconfont\">&#xe62d;</i>\r\n//                     <span className=\"text\"> 收藏 </span>\r\n//                 </CollectButton>\r\n//                 <BgLayer ref={layer}></BgLayer>\r\n//                 <SongListWrapper ref={songScrollWrapper}>\r\n//                     {/* // 歌曲列表部分，待会专门拆解 */}\r\n//                     <Scroll ref={songScroll} onScroll={handleScroll} >\r\n//                         <SongsList\r\n//                             songs={songs}\r\n//                             showCollect={false}\r\n//                         ></SongsList>\r\n//                     </Scroll>\r\n//                 </SongListWrapper>\r\n//             </Container>\r\n//             {/* //Container 组件下面 */}\r\n//             { loading ? (<Loading></Loading>) : null}\r\n//         </CSSTransition>\r\n//     )\r\n// }\r\n// const mapStateToProps = state => ({\r\n//     artist: state.getIn([\"singerInfo\", \"artist\"]),\r\n//     songs: state.getIn([\"singerInfo\", \"songsOfArtist\"]),\r\n//     loading: state.getIn([\"singerInfo\", \"loading\"]),\r\n// });\r\n// // 映射 dispatch 到 props 上\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         getSingerDataDispatch(id) {\r\n//             dispatch(changeEnterLoading(true));\r\n//             dispatch(getSingerInfo(id));\r\n//         }\r\n//     };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(React.memo(Singer));\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { Container } from \"./style\";\r\nimport { HEADER_HEIGHT } from \"./../../api/config\";\r\nimport { ImgWrapper, CollectButton, SongListWrapper, BgLayer } from \"./style\";\r\nimport Header from \"../../baseUI/header/index\";\r\nimport Scroll from \"../../baseUI/scroll/index\";\r\nimport SongsList from \"../SongList\";\r\nimport { connect } from 'react-redux';\r\nimport Loading from \"./../../baseUI/loading/index\";\r\nimport { getSingerInfo, changeEnterLoading } from \"./store/actionCreators\";\r\nimport MusicNote from \"../../baseUI/music-note/index\";\r\n\r\nfunction Singer(props) {\r\n  const initialHeight = useRef(0);\r\n  const [showStatus, setShowStatus] = useState(true);\r\n\r\n  const { \r\n    artist: immutableArtist, \r\n    songs: immutableSongs, \r\n    loading,\r\n  } = props;\r\n  \r\n  const { getSingerDataDispatch } = props;\r\n  \r\n  const artist = immutableArtist.toJS();\r\n  const songs = immutableSongs.toJS();\r\n\r\n  const collectButton = useRef();\r\n  const imageWrapper = useRef();\r\n  const songScrollWrapper = useRef();\r\n  const songScroll = useRef();\r\n  const header = useRef();\r\n  const layer = useRef();\r\n  const musicNoteRef = useRef ();\r\n\r\nconst musicAnimation = (x, y) => {\r\n  musicNoteRef.current.startAnimation ({ x, y });\r\n};\r\n  //往上偏移的尺寸，露出圆角\r\n  const OFFSET = 5;\r\n\r\n  useEffect(() => {\r\n    const id = props.match.params.id;\r\n    getSingerDataDispatch(id);\r\n    let h = imageWrapper.current.offsetHeight;\r\n    initialHeight.current = h;\r\n    songScrollWrapper.current.style.top = `${h - OFFSET}px`;\r\n    //把遮罩先放在下面，以裹住歌曲列表\r\n    layer.current.style.top = `${h - OFFSET}px`;\r\n    songScroll.current.refresh();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleScroll = useCallback(pos => {\r\n    let height = initialHeight.current;\r\n    const newY = pos.y;\r\n    const imageDOM = imageWrapper.current;\r\n    const buttonDOM = collectButton.current;\r\n    const headerDOM = header.current;\r\n    const layerDOM = layer.current;\r\n    const minScrollY = -(height - OFFSET) + HEADER_HEIGHT;\r\n\r\n    //指的是滑动距离占图片高度的百分比\r\n    const percent = Math.abs(newY / height);\r\n\r\n    if (newY > 0) {\r\n      imageDOM.style[\"transform\"] = `scale(${1 + percent})`;\r\n      buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\r\n      layerDOM.style.top = `${height - OFFSET + newY}px`;\r\n    } else if (newY >= minScrollY) {\r\n      layerDOM.style.top = `${height - OFFSET - Math.abs(newY)}px`;\r\n      //这时候保证遮罩的层叠优先级比图片高，不至于被图片挡住\r\n      layerDOM.style.zIndex = 1;\r\n      imageDOM.style.paddingTop = \"75%\";\r\n      imageDOM.style.height = 0;\r\n      imageDOM.style.zIndex = -1;\r\n      //按钮跟着移动且渐渐变透明\r\n      buttonDOM.style[\"transform\"] = `translate3d(0, ${newY}px, 0)`;\r\n      buttonDOM.style[\"opacity\"] = `${1 - percent * 2}`;\r\n    } else if (newY < minScrollY) {\r\n      //往上滑动，但是超过Header部分\r\n      layerDOM.style.top = `${HEADER_HEIGHT - OFFSET}px`;\r\n      layerDOM.style.zIndex = 1;\r\n      //防止溢出的歌单内容遮住Header\r\n      headerDOM.style.zIndex = 100;\r\n      //此时图片高度与Header一致\r\n      imageDOM.style.height = `${HEADER_HEIGHT}px`;\r\n      imageDOM.style.paddingTop = 0;\r\n      imageDOM.style.zIndex = 99;\r\n    }\r\n  }, [])\r\n\r\n  const setShowStatusFalse = useCallback(() => {\r\n    setShowStatus(false);\r\n  }, []);\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={showStatus}\r\n      timeout={300}\r\n      classNames=\"fly\"\r\n      appear={true}\r\n      unmountOnExit\r\n      onExited={() => props.history.goBack()}\r\n    >\r\n      <Container>\r\n        <Header\r\n          handleClick={setShowStatusFalse}\r\n          title={artist.name}\r\n          ref={header}\r\n        ></Header>\r\n        <ImgWrapper ref={imageWrapper} bgUrl={artist.picUrl}>\r\n          <div className=\"filter\"></div>\r\n        </ImgWrapper>\r\n        <CollectButton ref={collectButton}>\r\n          <i className=\"iconfont\">&#xe62d;</i>\r\n          <span className=\"text\">收藏</span>\r\n        </CollectButton>\r\n        <BgLayer ref={layer}></BgLayer>\r\n        <SongListWrapper ref={songScrollWrapper}>\r\n          <Scroll ref={songScroll} onScroll={handleScroll}>\r\n            <SongsList\r\n              songs={songs}\r\n              showCollect={false}\r\n              musicAnimation={musicAnimation}\r\n            ></SongsList>\r\n          </Scroll>\r\n        </SongListWrapper>\r\n        { loading ? (<Loading></Loading>) : null}\r\n        <MusicNote ref={musicNoteRef}></MusicNote>\r\n      </Container>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\n// 映射Redux全局的state到组件的props上\r\nconst mapStateToProps = state => ({\r\n  artist: state.getIn([\"singerInfo\", \"artist\"]),\r\n  songs: state.getIn([\"singerInfo\", \"songsOfArtist\"]),\r\n  loading: state.getIn([\"singerInfo\", \"loading\"]),\r\n});\r\n// 映射dispatch到props上\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getSingerDataDispatch(id) {\r\n      dispatch(changeEnterLoading(true));\r\n      dispatch(getSingerInfo(id));\r\n    }\r\n  };\r\n};\r\n\r\n// 将ui组件包装成容器组件\r\nexport default connect(mapStateToProps,mapDispatchToProps)(React.memo(Singer));"],"sourceRoot":""}